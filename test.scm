(define (let-demo3 x)
    (let ((x (+ x 1)))
        (let ((y (- x 1)))
            (* x y))))

(define (let-demo3a x)
    (let* ((x (+ x 1))
          (y (- x 1)))
          (* x y)))

(define (let-helper bindlst body)
    (if (null? bindlst)
        body
        (append (cons 'let (list(list (car bindlst))))
            (list (let-helper (cdr bindlst) body)))
        )
)
(define (popl-eval-let* expr)
    (let-helper (cadr expr) (caddr expr))
)
